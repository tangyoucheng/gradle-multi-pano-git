<krpano>
    <!-- krpano 1.18.3 - Default Virtual Tour Skin -->

    <!-- Global Skin settings (can be overridden in the 'outer' xml) -->
    <skin_settings maps="false"
                   maps_type="bing"
                   maps_bing_api_key=""
                   maps_zoombuttons="false"
                   gyro="true"
                   title="true"
                   thumbs="true"
                   thumbs_width="80" thumbs_height="80" thumbs_padding="10" 
                   thumbs_opened="false"
                   thumbs_text="true"
                   thumbs_dragging="true"
                   thumbs_onhoverscrolling="false"
                   thumbs_scrollbuttons="false"
                   thumbs_scrollindicator="false"
                   thumbs_loop="false"
                   tooltips_thumbs="false"
                   tooltips_hotspots="false"
                   tooltips_mapspots="false"
                   loadscene_flags="MERGE"
                   loadscene_blend="BLEND(0.5)"
                   controlbar_offset="20"
                   />


    <!-- Skin Styles -->
    
    <!--引入外部ＸＭＬ文件-->
    <include url="barAction.xml"/>

	<events name="stagescaletester_onresize" keep="true"
	onresize="stagescaletester_update();"
	/>
	<!-- show information about the current stagescale and apply the inverse scaling to keep the stagescalertester buttons always the same size -->
	<action name="stagescaletester_update" >
		copy(ss,stagescale);
		div(layer[stagescaletester].scale,1,ss);
		div(layer[stagescaletester].y,-100,ss);
		div(newfontsize,12,ss);
		roundval(newfontsize,2);
		txtadd(layer[stagescaletester_ss3].css,'text-align:center; font-family:Arial; color:#FFFFFF; font-weight:bold; font-size:',get(newfontsize),'px;');
		roundval(ss,2);
		copy(pr,device.pixelratio);roundval(pr,2);
		copy(sw,stagewidth);roundval(sw);
		copy(sh,stageheight);roundval(sh);
		txtadd(layer[stagescaletester_ss3].html,'stagescale=',get(ss),'[br]stagesize=',get(sw),'x',get(sh),'[br]device.pixelratio=',get(pr));
	</action>
	
    <!-- skin_base - the base skin image -->
    <style name="skin_base" url="vtourskin.png" />

    <!-- skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style -->
    <style name="skin_glow"
           ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
           onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); "
           onout="if(skin_lockglow === name, ifnot(pressed, skin_buttonglow(null);delete(skin_lockglow); ));"
           onup="if(hovering, skin_buttonglow(get(name),0.3), skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"
           />

    <!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
    <style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:10px;" textshadow="1" />

    <!-- skin_hotspotstyle - style for the hotspots (note - the onclick event will be overwritten here and can't be set directly at the hotspot! the hotspots need to have a 'linkedscene' attribute to be clickable) -->
    <style name="skin_hotspotstyle" url="vtourskin_hotspot.png" scale="0.5" edge="top" oy="0" distorted="false"
           tooltip=""
           onclick="if(linkedscene, skin_hidetooltips(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); );"
           onloaded="if(skin_settings.tooltips_hotspots, if(linkedscene, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); ));"
           />

    <!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
    <style name="skin_tooltips"
           onover="copy(layer[skin_tooltip].html, tooltip);
                   set(layer[skin_tooltip].visible, true);
                   tween(layer[skin_tooltip].alpha, 1.0, 0.1);
                   asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           onout="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
           />

    <!-- the tooltip textfield -->
    <layer name="skin_tooltip" keep="true"
           url="%SWFPATH%/plugins/textfield.swf"
           parent="STAGE"
           visible="false" alpha="0" enabled="false"
           align="lefttop" edge="bottom" oy="-2" width="200" autoheight="true"
           background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
           border="false" bordercolor="0x000000" borderalpha="1.0" borderwidth="1.0" roundedge="0"
           shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
           textshadow="1" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
           css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;"
           html=""
           />

    <!-- context menu -->
	<contextmenu>
        <item name="kr" caption="KRPANO"     />
        <item name="fs" caption="FULLSCREEN" />
        <item name="cc" caption="Change Controlmode" onclick="skin_changecontrolmode();"  separator="true" />
        <item name="nv" caption="Normal View"        onclick="skin_view_normal();"        showif="view.vlookatrange == 180" separator="true"      />
        <item name="fv" caption="Fisheye View"       onclick="skin_view_fisheye();"       showif="view.vlookatrange == 180" devices="flash|webgl" />
        <item name="sv" caption="Stereographic View" onclick="skin_view_stereographic();" showif="view.vlookatrange == 180" devices="flash|webgl" />
        <item name="av" caption="Architectural View" onclick="skin_view_architectural();" showif="view.vlookatrange == 180"                       />
        <item name="pv" caption="Pannini View"       onclick="skin_view_pannini();"       showif="view.vlookatrange == 180" devices="flash|webgl" />
        <item name="lp" caption="Little Planet View" onclick="skin_view_littleplanet();"  showif="view.vlookatrange == 180" devices="flash|webgl" />
	</contextmenu>

    <!-- Skin Layout -->

    <layer visible="false" name="skin_scroll_window" type="container" keep="true" align="leftbottom" width="100%" height="100%" x="0" y="160" y_opened="160" y_closed="-2" maskchildren="true">
        <layer name="skin_scroll_layer" type="container" align="leftbottom" width="100%" height="100%" x="0" y="-100%">
            <layer name="skin_topborder" style="skin_base" crop="2|0|60|12" align="topleft" edge="bottomleft" width="100%" height="12" x="0" y="0" enabled="false" />
            <layer name="skin_title" url="%SWFPATH%/plugins/textfield.swf" align="lefttop" edge="leftbottom" width="95%" height="32" autoheight="true" x="5" y="-3" zorder="4" enabled="false" background="false" border="false" css="text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:16px;" textshadow="1" visible="false" />
            <layer name="skin_scroll_container" type="container" bgcolor="0x000000" bgalpha="0.3" align="lefttop" width="100%" height="100%" x="0" y="0" maskchildren="true">
                <layer name="skin_thumbs_container" bgcapture="true" handcursor="false"  type="container" align="lefttop" width="100%" height="100%" visible="false" y="-7">
                    <layer name="skin_thumbs_scrollleft"  style="skin_base|skin_glow" crop="0|64|64|64"  align="lefttop"  edge="left"  x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));" visible="false" />
                    <layer name="skin_thumbs_scrollright" style="skin_base|skin_glow" crop="64|64|64|64" align="righttop" edge="right" x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));" visible="false" />
                    <layer name="skin_thumbs_scrollindicator" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="lefttop" width="0" y="100" height="4" visible="false" enabled="false" />
                    <layer name="skin_thumbs" state="closed" url="%SWFPATH%/plugins/scrollarea.swf" alturl="%SWFPATH%/plugins/scrollarea.js" direction="h" align="top" width="100%" height="100" zorder="1" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" />
                </layer>
                <layer name="skin_map" state="closed" url="" visible="false" align="lefttop" width="100%" height="50%" x="0" y="0" zorder="1" lat="0" lng="0" zoom="10" bgalpha="0" maptype="satellite" onmapready="skin_addmapspots();">
                    <maptypecontrol visible="true" align="righttop" x="5" y="5" buttonalign="v" />
                    <radar visible="false" headingoffset="0" />
                    <spotstyle name="DEFAULT" url="vtourskin_mapspot.png" activeurl="vtourskin_mapspotactive.png" edge="bottom" x="-5" y="-8" scale="0.5" />
                    <layer name="skin_map_zoom_in"  style="skin_base" visible="false" crop="9|512|46|64"  align="right" x="0" y="-40" zorder="2" ondown="layer[skin_map].zoomin();  skin_buttonglow(get(name));" onup="skin_buttonglow(null);" />
                    <layer name="skin_map_zoom_out" style="skin_base" visible="false" crop="73|512|46|64" align="right" x="0" y="+40" zorder="2" ondown="layer[skin_map].zoomout(); skin_buttonglow(get(name));" onup="skin_buttonglow(null);" />
                </layer>
            </layer>
        </layer>
    </layer>
               
    <layer visible="false"  name="skin_control_bar" bgcapture="true" handcursor="false" keep="true" type="container" bgcolor="0x000000" bgalpha="0.3" align="leftbottom" width="100%" height="40" x="0" y="20" y_opened="20" y_closed="-42" zorder="1">
        <layer align="leftbottom" memo="2016/12/20增加VR图标" name="webvr_enterbutton" onclick="webvr.enterVR();enterVR();" scale="0.5" style="skin_base|skin_glow" url="others/cardboard_logo.png" visible="true" x="135" y="4"/>
        <plugin name="snd" url="soundonoff.png" align="leftbottom" x="95" y="4" alpha="0.5" scale="0.6" onover="tween(alpha,1);" onout="tween(alpha,0.25);" />
        <layer name="skin_btmborder"  style="skin_base"           crop="2|52|60|12"   align="bottomleft" edge="topleft" width="100%" height="12" x="0" y="0" enabled="false" />
        <layer name="skin_btn_thumbs" style="skin_base|skin_glow" crop="0|128|64|64"  align="leftbottom"  x="50"   y="4"   scale="0.5" ondown2="skin_showmap(false); skin_showthumbs();" />
        <layer name="skin_btn_map"    style="skin_base|skin_glow" crop="64|128|64|64" align="rightbottom"  x="50"   y="4"   scale="0.5"  visible="true" />
        <layer name="skin_btn_gyro"   style="skin_base|skin_glow" crop="0|384|64|64"  align="rightbottom"      x="90"  y="4"   scale="0.5" visible="false" devices="html5" />
        <layer name="skin_btn_up"     style="skin_base|skin_glow" crop="0|256|64|64"  align="leftbottom"      x="8"  y="4"   scale="0.5" onclick="skin_switchBoder('2');if(device.mobile,set(layer[layer_nimi_map_container].y, 98);,set(layer[layer_nimi_map_container].y, 64););set(layer[skin_control_bar_v].visible, true);skin_swapVH();" />
        <layer name="skin_btn_hide"   style="skin_base|skin_glow" crop="0|448|64|64"  align="right"       x="5"   y="0"   scale="0.5" onclick="skin_hideskin();set(layer[defaultskin_buttons].visible, false);" />
        <layer name="skin_btn_show"   style="skin_base|skin_glow" crop="64|448|64|64" align="center"      y="-38" scale="0.5" alpha="0" visible="false" onclick="skin_showskin();wait(0.2);set(layer[defaultskin_buttons].visible, true);" />
    </layer>
            
    <layer name="skin_loadingtext"  keep="true" url="%SWFPATH%/plugins/textfield.swf" align="center" x="5" y="-5" html="loading..." visible="false" autoheight="true" background="false" border="false" enabled="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:22px; font-style:italic;" textshadow="2" />
    <layer name="skin_buttonglow"   keep="true" style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" alpha="0.0" visible="false" enabled="false" />
    <layer name="skin_logo"         keep="true" url="" align="righttop" x="5" y="5" capture="false" accuracy="1" state="small" onclick="if(state == 'small', skin_openlogo(); , skin_closelogo('now'); opened_onclick(); );" />
    <!--<plugin name="skin_gyro"        keep="true" url="" html5_url="%SWFPATH%/plugins/gyro.js" devices="html5+!firefox+!android" enabled="false" camroll="true" friction="0" velastic="0" onavailable="if(device.fullscreensupport, if(device.mobile,add(layer[skin_btn_gyro].x,40),add(layer[skin_btn_gyro].x,20));); if(view.vlookatrange == 180, set(layer[skin_btn_gyro].visible,true));" />-->
	
    <!-- Skin Events -->

    <events name="skin_events" keep="true"
            onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
            onnewpano="skin_showloading(true); skin_update_scene_infos();"
            onremovepano="skin_showloading(true);"
            onloadcomplete="skin_showloading(false);"
            onresize="skin_onresize();"
            />

    <events name="skin_events" devices="fullscreensupport"
            onenterfullscreen="set(layer[skin_btn_fs].crop, '64|576|64|64');"
            onexitfullscreen="set(layer[skin_btn_fs].crop, '0|576|64|64');"
            />


    <!-- Alternative small screen layout for mobile devices (override/extend settings) -->

    <krpano devices="mobile">
        <layer name="skin_scroll_window" y="80" y_opened="80" y_closed="-10">
            <layer name="skin_scroll_layer">
                <layer name="skin_topborder" height="24" />
                <layer name="skin_title" css="text-align:left; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:26px;" />
                <layer name="skin_scroll_container">
                    <layer name="skin_thumbs_container">
                        <layer name="skin_thumbs_scrollleft"  scale="1" />
                        <layer name="skin_thumbs_scrollright" scale="1" />
                        <layer name="skin_thumbs_scrollindicator" height="6" />
                        <layer name="skin_thumbs" height="200" />
                    </layer>
                    <layer name="skin_map">
                        <maptypecontrol scale="1.5" />
                    </layer>
                </layer>
            </layer>
        </layer>

        <layer name="skin_control_bar" height="80" y="0" y_opened="0" y_closed="-80">
            <layer name="skin_btmborder"  visible="false" />
            <layer name="skin_btn_prev"   visible="false" />
            <layer name="skin_btn_up"     scale="1" y="8" x="0" />
            <layer name="skin_btn_thumbs" scale="1" y="10" x="80" />
            <!-- 2016/12/20增加VR图标 -->
			<layer name="webvr_enterbutton" scale="0.9" y="10" x="250" />
            <layer name="skin_btn_next"   visible="false"  />
            <layer name="skin_btn_map"    scale="1" y="8" x="80" />
            <layer name="skin_btn_lt"     visible="false" />
            <layer name="skin_btn_rt"     visible="false" />
            <layer name="skin_btn_dn"     visible="false" />
            <layer name="skin_btn_in"     visible="false" />
            <layer name="skin_btn_ou"     visible="false" />
            <layer name="skin_btn_gyro"   scale="1" y="8" x="150" visible="true"/>
            <layer name="skin_btn_fs"     visible="false" />
            <layer name="skin_btn_hide"   scale="1" x="5" y="-5" />
            <layer name="skin_btn_show"   scale="1" x="0" y="-65" />
            <plugin name="snd"   scale="1.3" x="160" y="8" />
        </layer>

        <layer name="skin_loadingtext" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-style:italic; font-size:44px;" />
        <layer name="skin_buttonglow"  scale="2.0" />

        <style name="skin_thumbtext_style" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:20px;" />
    </krpano>

    <layer align="rightbottom" visible="false" name="skin_btn_share_v" style="skin_glow" url="..\buttons-png\buttons-3.png" scale="0.8"  keep="true" crop="880|0|80|80" onovercrop="880|80|80|80" onclick="js(doOpenSharePage(););" x="2" y="90"/>  
       
    <!-- Skin Actions -->
    <action name="barMobileInit">
        set(layer[skin_btn_share_v].parent, 'skin_control_bar_v');
        
        <!-- moblie下横屏竖屏导航图大小修正-->
        if(layer[skin_scroll_layer].pixelwidth GT layer[skin_scroll_layer].pixelheight
        ,
            set(mapWidth, get(layer[skin_scroll_layer].pixelheight));
        ,
            set(mapWidth, get(layer[skin_scroll_layer].pixelwidth));
        );
        
	    sub(mapWidth, 120);
	    set(layer[layer_nimi_map_container].width, get(mapWidth));
	    set(layer[layer_nimi_map_container].height, prop);
    
        <!-- moblie下动态改变导航图位置事件-->
        set(evt_rtv, "");
        txtadd(evt_rtv, get(evt_rtv), "skin_switchBoder();");
        txtadd(evt_rtv, get(evt_rtv), "if(layer[skin_thumbs].state == 'closed'");
        txtadd(evt_rtv, get(evt_rtv), ",");
        txtadd(evt_rtv, get(evt_rtv), "  set(layer[layer_nimi_map_container].y, 98);");
        txtadd(evt_rtv, get(evt_rtv), ",");
        txtadd(evt_rtv, get(evt_rtv), "  set(layer[layer_nimi_map_container].y, 300);");
        txtadd(evt_rtv, get(evt_rtv), ");");
        txtadd(evt_rtv, get(evt_rtv), "set(layer[skin_control_bar_v].visible,false);");
        txtadd(evt_rtv, get(evt_rtv), "skin_swapVH();");
        set(layer[skin_btn_rt_v].ondown2, evt_rtv);
        set(layer[layer_nimi_map_container].y, 98);
		
        <!-- 只显示分享按钮并居中-->
        set(layer[btn_share].visible, true);
        set(layer[btn_share].scale, 0.8);
        set(layer[btn_share].y, -10);
        set(layer[btn_share].x, get(layer[defaultskin_buttons].width));
	    mul(layer[btn_share].x, 0.5);
	    sub(layer[btn_share].x, 20);
		set(layer[defaultskin_buttons].visible, false);
    
        <!-- 收集缩略图数量-->
	    set(nCount, 0);
	    for(set(i,0), i LT scene.count, inc(i),
                set(sname, get(scene[get(i)].name));
                txtadd(vthumbname, get(sname), "_v");
                if(scene[get(i)].thumburl!==null
                ,
                    inc(nCount);
                );  
        );
	    set(nScale, 2);
	    set(nPos, 0);
	    
	    <!-- 设置初始值-->
	    set(layer[scrollarea].height, 90);
	    set(layer[thumbContainer].width, 105);
	    set(layer[thumbContainer].x, -105);
	    set(layer[thumbContainer].x_closed, -105);
	    set(layer[thumbContainer_v].width, 118);
	    set(layer[thumbContainer_v].x, -118);
	    set(layer[thumbBarLayer].width, 105);
	    set(layer[skin_control_bar_v].width, 40);
	    set(layer[skin_control_bar_v].x_closed, -42);
	    set(layer[skin_control_bar_v].x_opened, 0);
	    set(layer[skin_control_bar_v].x, -84);
	    set(layer[skin_btn_thumbs_v].scale, 0.5);
	    set(layer[skin_btn_map_v].scale, 0.5);
	    set(layer[skin_btn_rt_v].scale, 0.5);
	    set(layer[skin_btn_hide_v].scale, 0.5);
	    set(layer[skin_btn_show_v].scale, 0.5);
	    set(layer[skin_btn_show_v].x, -19);
		set(layer[showBtnContainer].visible, true);
		set(layer[snd_v].scale, 1.3);
		<!-- 2016/12/20增加VR图标 -->
		set(layer[webvr_enterbutton_v].scale, 0.85);
		set(layer[webvr_enterbutton_v].y,get(layer[skin_control_bar_v].width));
		add(layer[webvr_enterbutton_v].y, -20);
		set(layer[webvr_enterbutton_v].x, 5);
	    
	    mul(layer[scrollarea].height, get(nCount));
        mul(layer[scrollarea].height, get(nScale));
        
		set(baseY, 100);
		set(style[thumbStyle].ondown, "tween(scale,2.2,0.1);");
		set(style[thumbStyle].onup, "tween(scale, 2, 0.25, easeOutBounce);");
		set(layer[skin_btn_map_v].y, 112.5);
		set(layer[skin_btn_hide_v].y, 22.5);
		set(layer[showBtnContainer].x, 115);
		add(layer[scrollarea].height, 20);
		set(layer[skin_btn_share_v].visible, true);
		set(layer[skin_btn_share_v].y, 292.5);
		set(layer[skin_btn_gyro_v].y, 202.5);
	    
	    <!-- 动态坐标设置-->
		mul(layer[skin_btn_gyro_v].scale, get(nScale));
	    mul(layer[skin_control_bar_v].width, get(nScale));
	    mul(layer[skin_control_bar_v].x_closed, get(nScale));
	    mul(layer[skin_btn_thumbs_v].scale, get(nScale));
	    mul(layer[skin_btn_map_v].scale, get(nScale));
	    mul(layer[skin_btn_rt_v].scale, get(nScale));
	    mul(layer[skin_btn_hide_v].scale, get(nScale));
	    mul(layer[skin_btn_show_v].scale, get(nScale));
	    mul(layer[thumbContainer_v].width, get(nScale));
	    mul(layer[thumbContainer_v].x, get(nScale));
	    mul(layer[thumbContainer].width, get(nScale));
	    mul(layer[thumbContainer].x, get(nScale));
	    mul(layer[thumbContainer].x_closed, get(nScale));
	    mul(layer[thumbBarLayer].width, get(nScale));
	    
	    for(set(i,0), i LT scene.count, inc(i),
	            set(sname, get(scene[get(i)].name));
	            txtadd(vthumbname, get(sname), "_v");
	            mul(thumbx, nPos, thumbxoffset);
	            if(scene[get(i)].thumburl!==null
	            ,
	                layer[get(vthumbname)].loadstyle(thumbStyle);
	                set(layer[get(vthumbname)].scale, get(nScale));
	                set(layer[get(vthumbname)].y, 90);
	                mul(layer[get(vthumbname)].y, get(nScale));
	                mul(layer[get(vthumbname)].y, nPos);
	                add(layer[get(vthumbname)].y, baseY);
	                inc(nPos);
	            );  
	    );
    </action>

    <action name="skin_startup">
        if(device.mobile == false,
            set(layer[layer_nimi_map_container].y, 64);
            copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
            copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
            add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
            add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);

            if(skin_settings.thumbs,
                if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
            
                copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);

                if(skin_settings.thumbs_onhoverscrolling,
                    if(device.mouse, set(layer[skin_thumbs].draggable, false));
                    set(layer[skin_thumbs].onhover_autoscrolling, true);
                  );
              );
          ,
            barMobileInit();
          );

        skin_addthumbs();
        skin_onresize();
        skin_updatescroll();

        copy(usegyro, skin_settings.gyro);
        if(device.desktop, set(usegyro, false));
        if(device.flash, set(usegyro, false));
        if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );

        if(skin_settings.maps == true,
            set(layer[skin_btn_map].visible, true);
            copy(layer[skin_map_zoom_in].visible,  skin_settings.maps_zoombuttons);
            copy(layer[skin_map_zoom_out].visible, skin_settings.maps_zoombuttons);
            
            if(device.flash,
                copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
                set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');
              ,
                if(skin_settings.maps_type == 'bing', 
                    copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
                    set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js'); 
                  ,
                    set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js'); 
                  );
              );
          <!--,
            if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
		   -->
          );
		  
		  set(layer[skin_btn_gyro].onclick, layer[skin_btn_gyro_v].onclick);
		  set(plugin[snd].onclick, plugin[snd_v].onclick);
    </action>

    <action name="skin_addthumbs">
        if(skin_settings.thumbs == false, 
            set(layer[skin_btn_thumbs].visible,false);
          ,
            copy(thumbwidth, skin_settings.thumbs_width);
            copy(thumbheight, skin_settings.thumbs_height);
            copy(thumbpadding, skin_settings.thumbs_padding);
            copy(thumbcrop, skin_settings.thumbs_crop);
    
            if(device.mobile,
                mul(thumbwidth,2);
                mul(thumbheight,2);
                mul(thumbpadding,2);
              );
    
            set(nCount, 0);
            for(set(i,0), i LT scene.count, inc(i)
            ,
                if(scene[get(i)].thumburl!==null
                ,
                    inc(nCount);
                );
            );
            
            add(thumbxoffset, thumbwidth, thumbpadding);
            mul(thumbxcenter, thumbxoffset, 0.5);
            mul(thumbbarwidth, thumbxoffset, nCount);
            add(thumbbarwidth, thumbpadding);
            add(thumbbarheight, thumbpadding, thumbheight);
            add(thumbbarheight, thumbpadding);
    
            if(skin_settings.thumbs_scrollindicator,
                copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
                add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
            );
    
            copy(layer[skin_thumbs].height, thumbbarheight);
            copy(layer[skin_thumbs].width, thumbbarwidth);
    
            mul(halfheight, thumbbarheight, 0.5);
            copy(layer[skin_thumbs_scrollleft].y, halfheight);
            copy(layer[skin_thumbs_scrollright].y, halfheight);
            
            set(nPos, 0);

            copy(thumbStyle_h, style[thumbStyle]);
            set(style[thumbStyle_h].align, center);
            set(style[thumbStyle_h].edge, center);
            set(style[thumbStyle_h].scalechildren, 'true');
            set(style[thumbStyle_h].ondown, get(style[thumbStyle].ondown));
            set(style[thumbStyle_h].onout, get(style[thumbStyle].onout));
            set(style[thumbStyle_h].onover, get(style[thumbStyle].onover));
            set(style[thumbStyle_h].onup, get(style[thumbStyle].onup));
            
            if(device.mobile
            ,
	            set(style[thumbStyle_h].ondown, "tween(scale,1.1,0.1);");
	            set(style[thumbStyle_h].onup, "tween(scale, 1.0, 0.25, easeOutBounce);");
	        );
            
            mul(offset_x, thumbbarwidth, 0.5);
            
            if(device.mobile
            ,
                sub(offset_x, 80);
            ,
	            sub(offset_x,45);
	            if(nCount GT 1
	            ,
	                add(offset_x, 5);
	            );
	        );
            
            for(set(i,0), i LT scene.count, inc(i),
                set(sname, get(scene[get(i)].name));
                txtadd(thumbname, get(sname), "_h");
                txtadd(vthumbname, get(sname), "_v");
                skin_setBoder(get(vthumbname), get(thumbname));
                addlayer(get(thumbname));
                copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
                set(layer[get(thumbname)].keep, true);
                set(layer[get(thumbname)].parent, 'skin_thumbs');
                set(layer[get(thumbname)].align, lefttop);
                copy(layer[get(thumbname)].crop, thumbcrop);
                copy(layer[get(thumbname)].width, thumbwidth);
                copy(layer[get(thumbname)].height, thumbheight);
                mul(thumbx, nPos, thumbxoffset);
                if(scene[get(i)].thumburl!==null
                ,
                    inc(nPos);
                );
                add(thumbx, thumbpadding);
                copy(layer[get(thumbname)].x, thumbx);
                sub(layer[get(thumbname)].x, offset_x);
                copy(layer[get(thumbname)].y, thumbpadding);
                add(scene[get(i)].thumbx, thumbx, thumbxcenter);
                copy(scene[get(i)].thumby, thumbpadding);
                set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
                txtadd(tempthumbname,'',get(i));
                if(skin_settings.tooltips_thumbs,
                    set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
                    layer[get(thumbname)].loadstyle(skin_tooltips);
                  );
                if(skin_settings.thumbs_text,
                    txtadd(thumbtext_h, 'skin_thumbtext_', get(i), "_h");
                    addlayer(get(thumbtext_h));
                    layer[get(thumbtext_h)].loadstyle(skin_thumbtext_style);
                    set(layer[get(thumbtext_h)].keep, true);
                    set(layer[get(thumbtext_h)].html, get(scene[get(i)].title));
		    set(layer[get(thumbtext_h)].parent, get(thumbname));
					
		    txtadd(thumbtext_v, 'skin_thumbtext_', get(i), "_v");
                    addlayer(get(thumbtext_v));
                    layer[get(thumbtext_v)].loadstyle(skin_thumbtext_style);
                    set(layer[get(thumbtext_v)].keep, true);
                    set(layer[get(thumbtext_v)].html, get(scene[get(i)].title));
		    set(layer[get(thumbtext_v)].parent, get(vthumbname));
                  );
                  layer[get(thumbname)].loadstyle(thumbStyle_h);
		  layer[get(vthumbname)].loadstyle(thumbStyle_h);
               );
          );
    </action>

    <action name="skin_addmapspots">
        for(set(i,0), i LT scene.count, inc(i),
            if(scene[get(i)].lat,
                txtadd(spotname, 'spot', get(i));
                txtadd(spotclickevent, 'skin_hidetooltips(); activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
                copy(scene[get(i)].mapspotname, spotname);
                addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);
                if(skin_settings.tooltips_mapspots,
                    set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );
                    txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover) );
                    txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout)  );
                  );
              );
          );

        if(xml.scene != null,
            activatespot( get(scene[get(xml.scene)].mapspotname) );
          ,
            activatespot(spot0);
          );

        zoomToSpotsExtent();
    </action>

    <action name="skin_onresize">
        mul(mh, area.pixelheight, -1);
        if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
        if(layer[skin_map].state == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); copy(layer[skin_map].height, hh); add(mh,hh); );
        set(layer[skin_scroll_layer].y, get(mh));
        <!-- ifnot(device.mobile, if(area.pixelwidth LT 480, skin_showbuttons(false), skin_showbuttons(true)); ); -->
    </action>
<!--
    <action name="skin_showbuttons">
		set(layer[skin_btn_lt].visible, %1);
        set(layer[skin_btn_rt].visible, %1);
        set(layer[skin_btn_up].visible, %1);
        set(layer[skin_btn_dn].visible, %1);
        set(layer[skin_btn_in].visible, %1);
        set(layer[skin_btn_ou].visible, %1);
        if(%1 == true,
            if(plugin[skin_gyro].available == true AND view.vlookatrange == 180, set(layer[skin_btn_gyro].visible, true), set(layer[skin_btn_gyro].visible, false) );
            if(device.fullscreensupport, set(layer[skin_btn_fs].visible, true) );
          ,
            set(layer[skin_btn_gyro].visible, false);
            set(layer[skin_btn_fs].visible, false);
          );
    </action>
 -->
    <action name="skin_updatescroll">
        if(layer[skin_thumbs].loaded,
            set(cursceneindex, 0);
            if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
            layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
          );
    </action>

    <action name="skin_updatethumbscroll">
        copy(padding,skin_settings.thumbs_padding);
        if(device.mobile, mul(padding,2));

        if(skin_settings.thumbs_scrollbuttons,
            if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
            if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
          );

        if(skin_settings.thumbs_scrollindicator,
            if(woverflow GT 0,
                set(layer[skin_thumbs_scrollindicator].visible,true);
                sub(iw,pixelwidth,woverflow);
                div(pw,iw,pixelwidth);
                div(px,loverflow,woverflow);
                mul(pw,iw);
                copy(layer[skin_thumbs_scrollindicator].width,pw);
                sub(iw,pw);
                sub(iw,padding);
                sub(iw,padding);
                mul(px,iw);
                add(px,padding);
                copy(layer[skin_thumbs_scrollindicator].x,px);
              ,
                set(layer[skin_thumbs_scrollindicator].visible,false);
              );
          );
    </action>

    <action name="skin_update_scene_infos">
        if(xml.scene !== null,
            if(scene[get(xml.scene)].index GE 0,
                if(skin_settings.title,
                    if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
                    delayedcall(0.1, set(layer[skin_title].visible,true) );
                  );

                if(skin_settings.thumbs_loop == false,
                    if(scene[get(xml.scene)].index GT 0,
                        set(layer[skin_btn_prev].enabled, true);
                        set(layer[skin_btn_prev].alpha, 1.0);
                      ,
                        set(layer[skin_btn_prev].enabled, false);
                        set(layer[skin_btn_prev].alpha, 0.3);
                      );

                    sub(lastsceneindex, scene.count, 1);
                    if(scene[get(xml.scene)].index LT lastsceneindex,
                        set(layer[skin_btn_next].enabled, true);
                        set(layer[skin_btn_next].alpha, 1.0);
                      ,
                        set(layer[skin_btn_next].enabled, false);
                        set(layer[skin_btn_next].alpha, 0.3);
                      );
                  ,
                    if(scene.count GT 1,
                        set(layer[skin_btn_prev].enabled, true);
                        set(layer[skin_btn_prev].alpha, 1.0);
                        set(layer[skin_btn_next].enabled, true);
                        set(layer[skin_btn_next].alpha, 1.0);
                      ,
                        set(layer[skin_btn_prev].enabled, false);
                        set(layer[skin_btn_prev].alpha, 0.3);
                        set(layer[skin_btn_next].enabled, false);
                        set(layer[skin_btn_next].alpha, 0.3);
                      );
                  );

                txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));


                if(scene[get(xml.scene)].mapspotname,
                    layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
                    layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
                  );
                
                <!--if(plugin[skin_gyro].available == true AND view.vlookatrange == 180, 
                    set(layer[skin_btn_gyro].visible, true);
                  , 
                    set(layer[skin_btn_gyro].visible, false) 
                );-->
              );
          );
    </action>

    <action name="skin_nextscene">
        add(newsceneindex, scene[get(xml.scene)].index, %1);
        if(newsceneindex GE 0,
            if(newsceneindex LT scene.count,
                txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
                layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
                loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));
              );
          );
    </action>

    <action name="skin_nextscene_loop">
        add(newsceneindex, scene[get(xml.scene)].index, %1);
        sub(lastsceneindex, scene.count, 1);
        if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
        if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
        layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
        loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend));
    	<!-- VR模式下切换场景时隐藏缩略图2016/12/27 -->
		start_thumbs(exit);
    </action>

    <action name="skin_showloading">
        set(layer[skin_loadingtext].visible, false);
    </action>

    <action name="skin_hidetooltips">
        set(layer[skin_tooltip].alpha,0.0);
        set(layer[skin_tooltip].visible,false);
    </action>

    <action name="skin_buttonglow">
        if(%1 != null,
            set(strength,0.7);
            if(%2 != null, set(strength,%2));
            set(layer[skin_buttonglow].parent, %1);
            set(layer[skin_buttonglow].visible, true);
            tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
          ,
            tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
          );
    </action>

    <action name="skin_hideskin">
        if(layer[skin_map].state != 'closed', skin_showmap(false););
        if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false););
        tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_closed), 0.5, easeOutQuint);
        tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_closed), 0.5, easeOutQuint);
        set(layer[skin_btn_show].visible,true);
        tween(layer[skin_btn_show].alpha, 1, 0.25, easeOutQuint);
        <!-- 工具栏横向时，点击隐藏按钮隐藏导航地图 -->
        delayedcall(0.3,if(layer[skin_btn_rt_v].hadMap == 'yes', closemap();););
    </action>

    <action name="skin_showskin">
        tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_opened), 0.5, easeOutQuint);
        tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_opened), 0.5, easeOutQuint);
        set(layer[skin_btn_show].visible,false);
        tween(layer[skin_btn_show].alpha,0,0);
    </action>

    <action name="skin_showthumbs">
        if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
        mul(mh, layer[skin_scroll_layer].pixelheight, -1);
        if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
        if(show,
            if(device.mobile
            ,
               tween(layer[layer_nimi_map_container].y, 300, 0.5, easeOutQuint);
            ,
               tween(layer[layer_nimi_map_container].y, 164, 0.5, easeOutQuint);
            );
            set(layer[skin_thumbs].state, 'opened');
            add(mh, layer[skin_thumbs].height);
            tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
            set(layer[skin_thumbs_container].visible, true);
            tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
            tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
          ,
            set(layer[skin_thumbs].state, 'closed');
            tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
            if(device.mobile
            ,
               tween(layer[layer_nimi_map_container].y, 98, 0.5, easeOutQuint);
            ,
               tween(layer[layer_nimi_map_container].y, 64, 0.5, easeOutQuint);
            );  
          );
    </action>

    <action name="skin_showmap">
        if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
        mul(mh, layer[skin_scroll_layer].pixelheight, -1);
        if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
        if(show,
            tween(layer[skin_logo].alpha, 0.0, 0.25, default, set(layer[skin_logo].visible,false));
            tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
            set(layer[skin_map].visible, true);
            tween(layer[skin_map].alpha, 1.0, 0.25);
            set(layer[skin_map].state, 'opened');
            sub(hh,area.pixelheight,skin_settings.controlbar_offset);
            sub(hh,layer[skin_control_bar].height);
            sub(hh,32);
            add(mh,hh);
            copy(layer[skin_map].height, hh);
            tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
          ,
            set(layer[skin_map].state, 'closed');
            set(layer[skin_logo].visible, true); tween(layer[skin_logo].alpha, 1.0, 0.25);
            tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
          );
    </action>

    <action name="skin_openlogo">
        if(layer[skin_logo].state == 'small',
            set(layer[skin_logo].state, 'opening');
            copy(backup_logo_align, layer[skin_logo].align);
            copy(backup_logo_x, layer[skin_logo].x);
            copy(backup_logo_y, layer[skin_logo].y);
            copy(backup_logo_scale, layer[skin_logo].scale);
            layer[skin_logo].changeorigin(center);
            tween(layer[skin_logo].x, 0, 0.5, easeOutQuint);
            tween(layer[skin_logo].y, 0, 0.5, easeOutQuint);
            tween(layer[skin_logo].scale, 1, 0.5, easeOutQuint);
            delayedcall(0.5, set(layer[skin_logo].state, 'opened') );
            delayedcall(0, set(events[skin_events].onmouseup, delayedcall(0, skin_closelogo()) ) );
          );
    </action>

    <action name="skin_closelogo">
        if(layer[skin_logo].state == 'opened',
            set(layer[skin_logo].state, 'closing');
            layer[skin_logo].changeorigin(get(backup_logo_align));
            if(%1 == 'now',
                stoptween(layer[skin_logo].x, layer[skin_logo].y, layer[skin_logo].scale);
                copy(layer[skin_logo].x, backup_logo_x);
                copy(layer[skin_logo].y, backup_logo_y);
                copy(layer[skin_logo].scale, backup_logo_scale);
                set(layer[skin_logo].state, 'small');
              ,
                tween(layer[skin_logo].x, get(backup_logo_x), 0.5, easeOutQuint);
                tween(layer[skin_logo].y, get(backup_logo_y), 0.5, easeOutQuint);
                tween(layer[skin_logo].scale, get(backup_logo_scale), 0.5, easeOutQuint);
                delayedcall(0.5, set(layer[skin_logo].state, 'small'));
              );
            set(events[skin_events].onmouseup, null);
          );
    </action>
    
    
    <action name="skin_changecontrolmode">
        switch(control.mousetype, moveto, drag2d);
        switch(control.touchtype, moveto, drag2d);
    </action>

    <action name="skin_view_look_straight">
        if(view.vlookat LT -80 OR view.vlookat GT +80,
            tween(view.vlookat, 0.0, 1.0, easeInOutSine);
            tween(view.fov,     100, distance(150,0.8));
          );
    </action>

    <action name="skin_view_normal">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini,       0.0, distance(1.0,0.5));
        tween(view.fisheye,       0.0, distance(1.0,0.5));
    </action>

    <action name="skin_view_fisheye">
        skin_view_look_straight();
        tween(view.architectural, 0.0,  distance(1.0,0.5));
        tween(view.pannini,       0.0,  distance(1.0,0.5));
        tween(view.fisheye,       0.35, distance(1.0,0.5));
    </action>

    <action name="skin_view_architectural">
        skin_view_look_straight();
        tween(view.architectural, 1.0, distance(1.0,0.5));
        tween(view.pannini,       0.0, distance(1.0,0.5));
        tween(view.fisheye,       0.0, distance(1.0,0.5));
    </action>

    <action name="skin_view_stereographic">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini,       0.0, distance(1.0,0.5));
        tween(view.fisheye,       1.0, distance(1.0,0.8));
    </action>

    <action name="skin_view_pannini">
        skin_view_look_straight();
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini,       1.0, distance(1.0,0.8));
        if(view.fisheye LT 0.1,
            tween(view.fisheye, 1.0, distance(1.0,0.8));
          );
    </action>

    <action name="skin_view_littleplanet">
        tween(view.architectural, 0.0, distance(1.0,0.5));
        tween(view.pannini,       0.0, distance(1.0,0.5));
        tween(view.fisheye,       1.0, distance(1.0,0.8));
        tween(view.fov,           150, distance(150,0.8));
        tween(view.vlookat,        90, distance(100,0.8));
        add(new_hlookat, view.hlookat, 123.0);
        tween(view.hlookat, get(new_hlookat), distance(100,0.8));
    </action>
    
	<!-- 进入VR模式时只显示导航热点 -->
	<action name="normalhs_enterVR">
	    for(set(i,0), i LT hotspot.count, inc(i),
			if(hotspot[get(i)].normal == false ,
				set(hotspot[get(i)].visible, false);
			);
		  );
	</action>
	<!-- 退出VR模式时显示所有热点 -->
	<action name="normalhs_exitVR">
		for(set(i,0), i LT hotspot.count, inc(i),
			if(hotspot[get(i)].normal == false , 
				set(hotspot[get(i)].visible, true);
			);
		 );
		
		<!--退出VR模式下的缩略图边框显示2016/12/29 --> 
	    if(layer[skin_control_bar_v].visible,
			txtadd(parentname, get(scene[get(xml.scene)].name), '_v');
		,
			txtadd(parentname, get(scene[get(xml.scene)].name), '_h');
		);
		if(layer[get(parentname)],
			set(layer[skin_thumbborder].parent, get(parentname));
			set(layer[skin_thumbborder].visible, true);
			,
			set(layer[skin_thumbborder].visible, false);
		);
		
	</action>
	<!-- 判断是否进入VR模式，进入VR模式时只显示导航热点 -->
	<style name="normalhs" memo="隐藏非导航热点" normal="false" onloaded="if(webvr.isenabled,set(visible,false),set(visible,true));"></style>

</krpano>
