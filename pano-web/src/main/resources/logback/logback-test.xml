<included>
    <!-- 说明： 1、日志级别及文件 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中 -->
    <!-- 例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志， -->
    <!-- 日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名 例如log-level-2013-12-21.0.log 其它级别的日志也是如此。 -->
    <!-- 2、文件路径 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。 -->
    <!-- 若部署到Tomcat下，则在Tomcat下的logs文件中 -->
    <!-- 3、Appender FILEERROR对应error级别，文件名以log-error-xxx.log形式命名 FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名 -->
    <!-- FILEINFO对应info级别，文件名以log-info-xxx.log形式命名 FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名 stdout将日志信息输出到控制上，为方便开发测试使用 -->
    <contextName>SpringBoot-cis</contextName>
    <if condition='isDefined("catalina.home")'>
        <then>
            <property name="LOG_PATH" value="${catalina.home}/cisLogs-test"/>
        </then>
        <else>
            <property name="LOG_PATH" value="cisLogs-test"/>
        </else>
    </if>
    <!--设置系统日志目录 -->
    <property name="APPDIR_ERROR" value="error" />
    <property name="APPDIR_WARN" value="warn" />
    <property name="APPDIR_INFO" value="info" />
    <!-- 日志记录器，日期滚动记录 -->
    <appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/${APPDIR_ERROR}/log_error.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定， -->
            <!-- 可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 -->
            <!-- 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${LOG_PATH}/${APPDIR_ERROR}/error-archives/log-error-%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始， 命名日志文件，例如log-error-2013-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>2MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 保存前30天的日志文件 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的自定义格式、 exception输出到独立的文件-->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="cn.com.cis.framework.common.log.layout.OutputStackTracePatternLayout">
                <!--格式化输出：%d表示日期，%-5level：级别从右显示5个字符宽度，${PID}：进程ID，%thread表示线程名，%logger表示输出日志的对象，%X，基于MDC参数输出的内容，%msg：日志消息，%nopex:输出日志数据,但是忽略exception，%n是换行符 -->
                <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %-5level ${PID} --- [%thread] %logger{255}  %X{log.id}    %X{request.id}    -    [%X{log.message.code}]    %msg%nopex%n</pattern>
                <enableOutputStackTrace>true</enableOutputStackTrace>
                <stackTraceDir>${LOG_PATH}/${APPDIR_ERROR}/exception/</stackTraceDir>
                <stackTraceFilename>'exception_'yyyy-MM-dd_HH-mm-ss'_%logId.log'</stackTraceFilename>
            </layout>
            <immediateFlush>true</immediateFlush>
        </encoder>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 日志记录器，日期滚动记录 -->
    <appender name="FILEWARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/${APPDIR_WARN}/log_warn.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定， -->
            <!-- 可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 -->
            <!-- 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${LOG_PATH}/${APPDIR_WARN}/warn-archives/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始， 命名日志文件，例如log-error-2013-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>2MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 保存前30天的日志文件 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%-5level：级别从右显示5个字符宽度，${PID}：进程ID，%thread表示线程名，%logger表示输出日志的对象，%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level ${PID} --- [%thread] %logger Line:%-3L - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 此日志文件只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 日志记录器，日期滚动记录 -->
    <appender name="FILEINFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${LOG_PATH}/${APPDIR_INFO}/log_info.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定， -->
            <!-- 可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 -->
            <!-- 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${LOG_PATH}/${APPDIR_INFO}/info-archives/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始， 命名日志文件，例如log-error-2013-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>2MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 保存前30天的日志文件 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%-5level：级别从右显示5个字符宽度，${PID}：进程ID，%thread表示线程名，%logger表示输出日志的对象，%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level ${PID} %logger Line:%-3L - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <!-- 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator -->
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>return event.getThreadName().startsWith("activiti-")
                    || event.getThreadName().contains("QuartzScheduler")
                    || message.contains("DataSourceValidationQuery")
                    || message.contains("Initializing Thymeleaf Template engine configuration")
                    || message.contains("select RES.* form ACT_RU_JOB")
                    || message.contains("select RES.* form ACT_RU_TIMER_JOB")
                    || message.contains("IMJOB_QRTZ")
                    || message.contains("FROM QRTZ_TRIGGERS");
                </expression>
            </evaluator>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>DENY</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <!-- 此日志文件只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 控制台日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--encoder 默认配置为PatternLayoutEncoder -->
        <encoder>
            <!--%-5level：级别从左显示5个字符宽度 -->
            <!--格式化输出：%d表示日期，%-5level：级别从右显示5个字符宽度，${PID}：进程ID，%thread表示线程名，%logger表示输出日志的对象，%msg：日志消息，%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%5level) ${PID} --- [%thread] %logger Line:%-3L - %msg%n
            </pattern>
            <!-- <charset>UTF-8</charset> -->
        </encoder>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <!-- 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator -->
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>return event.getThreadName().startsWith("activiti-")
                    || event.getThreadName().contains("QuartzScheduler")
                    || message.contains("DataSourceValidationQuery")
                    || message.contains("WorkerThread is shut down")
                    || message.contains("Initializing Thymeleaf Template engine configuration")
                    || message.contains("select RES.* form ACT_RU_JOB")
                    || message.contains("select RES.* form ACT_RU_TIMER_JOB")
                    || message.contains("IMJOB_QRTZ")
                    || message.contains("FROM QRTZ_TRIGGERS");
                </expression>
            </evaluator>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>DENY</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 开发环境日志等级设定，additivity指示是否遵循缺省的继承机制 -->
    <logger name="org.activiti" level="DEBUG" />
    <logger name="org.springframework" level="WARN" />
    <logger name="org.hibernate" level="WARN" />
    <logger name="cn.com.cis" level="INFO" />
    <logger name="jdbc.connection" additivity="false" level="OFF" />
    <logger name="jdbc.resultset" additivity="false" level="OFF" />
    <logger name="jdbc.audit" additivity="false" level="OFF" />
    <logger name="jdbc.sqlonly" additivity="false" level="OFF" />
    <logger name="jdbc.sqltiming" additivity="true" level="INFO" />

<!--     <logger name="org.apache.tomcat.util.scan.StandardJarScanner" additivity="false" level="ERROR" /> -->
    <logger name="org.apache.tomcat.util" additivity="false" level="ERROR" />


    <!-- 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 -->
    <!-- # TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF -->
    <root level="DEBUG">
        <appender-ref ref="FILEERROR" />
        <appender-ref ref="FILEWARN" />
        <appender-ref ref="FILEINFO" />

        <!-- 开发环境把日志输出到控制台 -->
        <!-- <springProfile name="development"> -->
        <appender-ref ref="STDOUT" />
        <!-- </springProfile> -->
    </root>

</included>
