<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.platform.platform.mapper.common01.PlatformMember01Mapper">
    <resultMap id="BaseResultMap" type="cn.com.platform.platform.model.common.PlatformMember"
        extends="cn.com.platform.platform.mapper.common.PlatformMemberMapper.BaseResultMap">
    </resultMap>

  <sql id="Base_Model_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Base_Model_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
    <!--通过基础model检索数据 -->
  <select id="selectByBaseModel" parameterType="cn.com.platform.platform.model.common.PlatformMemberQuery" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="cn.com.platform.platform.mapper.common.PlatformMemberMapper.Base_Column_List" />
    from platform_member
    <if test="_parameter != null">
      <include refid="Base_Model_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
    <!--通过基础model删除数据 -->
  <delete id="deleteByBaseModel" parameterType="cn.com.platform.platform.model.common.PlatformMemberQuery">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from platform_member
    <if test="_parameter != null">
      <include refid="Base_Model_Where_Clause" />
    </if>
  </delete>
    <!--检索未被删除的所有会员用户总件数 -->
    <select id="selectMembersCount" parameterType="map" resultType="java.lang.Long">
        select count(*) from platform_member
        <where>
            <if test="deleteFlag != null">
                DELETE_FLAG = #{deleteFlag}
            </if>
        </where>
    </select>
    <!--检索未被删除的所有会员用户 -->
    <select id="selectMembersInfo" parameterType="map" resultMap="BaseResultMap">
        select * from platform_member
        <where>
            <if test="memberLoginId != null">
                AND MEMBER_LOGIN_ID LIKE
                CONCAT('%',#{memberLoginId},'%')
            </if>
            <if test="memberName != null">
                AND MEMBER_NAME LIKE
                CONCAT('%',#{memberName},'%')
            </if>
            <if test="deleteFlag != null">
                AND DELETE_FLAG = #{deleteFlag}
            </if>
        </where>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="offSet != null and pageSize !=null">
            limit #{offSet},#{pageSize}
        </if>
    </select>
    <!--删除会员用户 -->
    <update id="deleteById" parameterType="cn.com.platform.platform.model.common.PlatformMember">
        update platform_member set DELETE_FLAG = 1
        where member_id=#{memberId}
    </update>
    <!--更新会员用户 -->
    <update id="updateByMemberId" parameterType="cn.com.platform.platform.model.common.PlatformMember">
        update platform_member
        set MEMBER_NAME = #{memberName,jdbcType=VARCHAR},
        MEMBER_EMAIL = #{memberEmail,jdbcType=VARCHAR},
        DELETE_FLAG = #{deleteFlag,jdbcType=VARCHAR},
        LAST_UPDATE_USER_ID = #{lastUpdateUserId,jdbcType=VARCHAR},
        LAST_UPDATE_DATE = #{lastUpdateDate,jdbcType=TIMESTAMP}
        where member_id = #{memberId,jdbcType=VARCHAR}
    </update>
    <!--检索拥有某一角色的所有用户-->
    <select id="selectMemberByRoleId" parameterType="map" resultMap="BaseResultMap">
        SELECT
            platform_member.MEMBER_ID,
            platform_member.MEMBER_NAME
        FROM
            platform_member
        LEFT JOIN platform_role_user ON platform_role_user.DELETE_FLAG = #{deleteFlag}
        AND platform_role_user.MEMBER_ID = platform_member.MEMBER_ID
        WHERE
            platform_member.DELETE_FLAG = #{deleteFlag}
        GROUP BY
            platform_member.MEMBER_ID,
            platform_member.MEMBER_NAME
    </select>
</mapper>