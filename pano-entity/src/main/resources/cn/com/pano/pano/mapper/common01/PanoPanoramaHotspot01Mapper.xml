<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.pano.pano.mapper.common01.PanoPanoramaHotspot01Mapper">
    <resultMap id="BaseResultMap" type="cn.com.pano.pano.model.common01.PanoPanoramaHotspot01Model"
        extends="cn.com.pano.pano.mapper.common.PanoPanoramaHotspotMapper.BaseResultMap">
        <result column="material_id" jdbcType="VARCHAR" property="materialId" />
        <result column="material_path" jdbcType="VARCHAR" property="materialPath" />
        <result column="gif_width" jdbcType="VARCHAR" property="gifWidth" />
        <result column="gif_height" jdbcType="VARCHAR" property="gifHeight" />
        <result column="gif_frame_count" jdbcType="VARCHAR" property="gifFrameCount" />
        <result column="gif_delay_time" jdbcType="VARCHAR" property="gifDelayTime" />
    </resultMap>
    <sql id="Base_Model_Where_Clause">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                        separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Base_Model_Where_Clause">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        <where>
            <foreach collection="baseCondition.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                        separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <select id="selectByBaseModel" parameterType="cn.com.pano.pano.model.common.PanoPanoramaHotspotQuery"
        resultMap="BaseResultMap">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="cn.com.pano.pano.mapper.common.PanoPanoramaHotspotMapper.Base_Column_List" />
        from pano_panorama_hotspot
        <if test="_parameter != null">
            <include refid="Base_Model_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByBaseModel" parameterType="cn.com.pano.pano.model.common.PanoPanoramaHotspotQuery">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        delete from pano_panorama_hotspot
        <if test="_parameter != null">
            <include refid="Base_Model_Where_Clause" />
        </if>
    </delete>
    <select id="countByBaseModel" parameterType="cn.com.pano.pano.model.common.PanoPanoramaHotspotQuery"
        resultType="java.lang.Long">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        select count(*) from pano_panorama_hotspot
        <if test="_parameter != null">
            <include refid="Base_Model_Where_Clause" />
        </if>
    </select>
    <update id="updateByBaseModelSelective" parameterType="map">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        update pano_panorama_hotspot
        <set>
            <if test="record.hotspotId != null">
                hotspot_id = #{record.hotspotId,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaId != null">
                panorama_id = #{record.panoramaId,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotScale != null">
                hotspot_scale = #{record.hotspotScale,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotType != null">
                hotspot_type = #{record.hotspotType,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotImageId != null">
                hotspot_image_id = #{record.hotspotImageId,jdbcType=VARCHAR},
            </if>
            <if test="record.externalLinkAddress != null">
                external_link_address = #{record.externalLinkAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotUrlType != null">
                hotspot_url_type = #{record.hotspotUrlType,jdbcType=VARCHAR},
            </if>
            <if test="record.nextRecommendHotspotId != null">
                next_recommend_hotspot_id = #{record.nextRecommendHotspotId,jdbcType=VARCHAR},
            </if>
            <if test="record.recommendInfo != null">
                recommend_info = #{record.recommendInfo,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotTooltip != null">
                hotspot_tooltip = #{record.hotspotTooltip,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotAth != null">
                hotspot_ath = #{record.hotspotAth,jdbcType=VARCHAR},
            </if>
            <if test="record.hotspotAtv != null">
                hotspot_atv = #{record.hotspotAtv,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaHlookat != null">
                panorama_hlookat = #{record.panoramaHlookat,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaVlookat != null">
                panorama_vlookat = #{record.panoramaVlookat,jdbcType=VARCHAR},
            </if>
            <if test="record.polygonFillcolor != null">
                polygon_fillcolor = #{record.polygonFillcolor,jdbcType=VARCHAR},
            </if>
            <if test="record.polygonFillalpha != null">
                polygon_fillalpha = #{record.polygonFillalpha,jdbcType=VARCHAR},
            </if>
            <if test="record.deleteFlag != null">
                DELETE_FLAG = #{record.deleteFlag,jdbcType=BIT},
            </if>
            <if test="record.createUserId != null">
                CREATE_USER_ID = #{record.createUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.createDate != null">
                CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.lastUpdateUserId != null">
                LAST_UPDATE_USER_ID = #{record.lastUpdateUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.lastUpdateDate != null">
                LAST_UPDATE_DATE = #{record.lastUpdateDate,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Base_Model_Where_Clause" />
        </if>
    </update>
    <update id="updateByBaseModel" parameterType="map">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        update pano_panorama_hotspot
        set hotspot_id = #{record.hotspotId,jdbcType=VARCHAR},
        panorama_id = #{record.panoramaId,jdbcType=VARCHAR},
        hotspot_scale = #{record.hotspotScale,jdbcType=VARCHAR},
        hotspot_type = #{record.hotspotType,jdbcType=VARCHAR},
        hotspot_image_id = #{record.hotspotImageId,jdbcType=VARCHAR},
        external_link_address = #{record.externalLinkAddress,jdbcType=VARCHAR},
        hotspot_url_type = #{record.hotspotUrlType,jdbcType=VARCHAR},
        next_recommend_hotspot_id = #{record.nextRecommendHotspotId,jdbcType=VARCHAR},
        recommend_info = #{record.recommendInfo,jdbcType=VARCHAR},
        hotspot_tooltip = #{record.hotspotTooltip,jdbcType=VARCHAR},
        hotspot_ath = #{record.hotspotAth,jdbcType=VARCHAR},
        hotspot_atv = #{record.hotspotAtv,jdbcType=VARCHAR},
        panorama_hlookat = #{record.panoramaHlookat,jdbcType=VARCHAR},
        panorama_vlookat = #{record.panoramaVlookat,jdbcType=VARCHAR},
        polygon_fillcolor = #{record.polygonFillcolor,jdbcType=VARCHAR},
        polygon_fillalpha = #{record.polygonFillalpha,jdbcType=VARCHAR},
        DELETE_FLAG = #{record.deleteFlag,jdbcType=BIT},
        CREATE_USER_ID = #{record.createUserId,jdbcType=VARCHAR},
        CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
        LAST_UPDATE_USER_ID = #{record.lastUpdateUserId,jdbcType=VARCHAR},
        LAST_UPDATE_DATE = #{record.lastUpdateDate,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Base_Model_Where_Clause" />
        </if>
    </update>
    <!--查询热点和相关素材的信息 -->
    <select id="selectHotSpotAndMaterialInfo" parameterType="map" resultMap="BaseResultMap">
        SELECT
            hotspot.hotspot_id,
            hotspot.hotspot_ath,
            hotspot.hotspot_atv, 
            hotspot.hotspot_image_id,
            hotspot.external_link_address,
            hotspot.hotspot_scale,
            CASE                 
                WHEN hotspot.hotspot_type = #{hotspotType} AND NULLIF(hotspot.hotspot_tooltip,'') IS NOT NULL THEN hotspot.hotspot_tooltip     
                WHEN hotspot.hotspot_type = #{hotspotType} AND NULLIF(hotspot.hotspot_tooltip,'') IS NULL THEN exposition.expo_go_scene_tooltip         
                ELSE hotspot.hotspot_tooltip
            END AS hotspot_tooltip,
            hotspot.hotspot_type,
            hotspot.hotspot_url_type,
            hotspot.polygon_fillalpha,
            hotspot.polygon_fillcolor,
            hotspot.panorama_hlookat,
            hotspot.panorama_vlookat,
            hotspot.recommend_info,
            material.material_id,
            material.material_path,
            material.gif_width,
            material.gif_height,
            material.gif_frame_count,
            material.gif_delay_time
        
        FROM
            pano_panorama_hotspot hotspot
            LEFT JOIN pano_material material ON hotspot.hotspot_image_id = material.material_id
            LEFT JOIN pano_panorama panorama ON panorama.panorama_id = hotspot.panorama_id
            LEFT JOIN pano_exposition exposition ON exposition.exposition_id = panorama.exposition_id
        <where>
            hotspot.delete_flag = #{deleteFlag}
            <if test="panoramaId != null">
                AND hotspot.panorama_id = #{panoramaId}
            </if>
        </where>
    </select>
    <!-- 根据expositionId获取场景热点位置信息 -->
    <select id="selectPanoramaHostSpotByExpositionId" parameterType="map" resultMap="BaseResultMap">
        SELECT w_panohost.*
            FROM  pano_panorama_hotspot w_panohost
            INNER JOIN pano_panorama w_pano on w_pano.panorama_id=w_panohost.panorama_id
            INNER JOIN pano_exposition w_expo on w_expo.exposition_id=w_pano.exposition_id
        WHERE
            w_expo.exposition_id= #{expositionId}
    </select>
    <!-- 以热点URL种类和热点ID为条件，更新对应图上热点URL种类。 -->
    <select id="updateHotspotUrlType" parameterType="map" resultMap="BaseResultMap">
        UPDATE pano_panorama_hotspot
        SET hotspot_url_type=''
        WHERE (hotspot_url_type = '2' OR hotspot_url_type = '4')
              AND hotspot_id NOT IN (SELECT hotspot_id  
                                    FROM pano_hotspot_url)
    </select>

</mapper>