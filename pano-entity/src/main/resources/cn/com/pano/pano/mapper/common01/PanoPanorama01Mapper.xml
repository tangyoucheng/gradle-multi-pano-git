<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.pano.pano.mapper.common01.PanoPanorama01Mapper">
    <resultMap id="BaseResultMap" type="cn.com.pano.pano.model.common01.PanoPanorama01Model"
        extends="cn.com.pano.pano.mapper.common.PanoPanoramaMapper.BaseResultMap">
    </resultMap>
    <sql id="Base_Model_Where_Clause">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                        separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Base_Model_Where_Clause">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        <where>
            <foreach collection="baseCondition.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                        separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <select id="selectByBaseModel" parameterType="cn.com.pano.pano.model.common.PanoPanoramaQuery"
        resultMap="BaseResultMap">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="cn.com.pano.pano.mapper.common.PanoPanoramaMapper.Base_Column_List" />
        from pano_panorama
        <if test="_parameter != null">
            <include refid="Base_Model_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByBaseModel" parameterType="cn.com.pano.pano.model.common.PanoPanoramaQuery">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        delete from pano_panorama
        <if test="_parameter != null">
            <include refid="Base_Model_Where_Clause" />
        </if>
    </delete>
    <select id="countByBaseModel" parameterType="cn.com.pano.pano.model.common.PanoPanoramaQuery"
        resultType="java.lang.Long">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        select count(*) from pano_panorama
        <if test="_parameter != null">
            <include refid="Base_Model_Where_Clause" />
        </if>
    </select>
    <update id="updateByBaseModelSelective" parameterType="map">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        update pano_panorama
        <set>
            <if test="record.panoramaId != null">
                panorama_id = #{record.panoramaId,jdbcType=VARCHAR},
            </if>
            <if test="record.expositionId != null">
                exposition_id = #{record.expositionId,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaSoundId != null">
                panorama_sound_id = #{record.panoramaSoundId,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaSortKey != null">
                panorama_sort_key = #{record.panoramaSortKey,jdbcType=DECIMAL},
            </if>
            <if test="record.startSceneFlag != null">
                start_scene_flag = #{record.startSceneFlag,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaName != null">
                panorama_name = #{record.panoramaName,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaPath != null">
                panorama_path = #{record.panoramaPath,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaHlookat != null">
                panorama_hlookat = #{record.panoramaHlookat,jdbcType=VARCHAR},
            </if>
            <if test="record.panoramaVlookat != null">
                panorama_vlookat = #{record.panoramaVlookat,jdbcType=VARCHAR},
            </if>
            <if test="record.thumbnailShowFlag != null">
                thumbnail_show_flag = #{record.thumbnailShowFlag,jdbcType=VARCHAR},
            </if>
            <if test="record.thumbNote != null">
                thumb_note = #{record.thumbNote,jdbcType=VARCHAR},
            </if>
            <if test="record.deleteFlag != null">
                DELETE_FLAG = #{record.deleteFlag,jdbcType=BIT},
            </if>
            <if test="record.createUserId != null">
                CREATE_USER_ID = #{record.createUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.createDate != null">
                CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.lastUpdateUserId != null">
                LAST_UPDATE_USER_ID = #{record.lastUpdateUserId,jdbcType=VARCHAR},
            </if>
            <if test="record.lastUpdateDate != null">
                LAST_UPDATE_DATE = #{record.lastUpdateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.notes != null">
                notes = #{record.notes,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Base_Model_Where_Clause" />
        </if>
    </update>
    <update id="updateByBaseModel" parameterType="map">
        <!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
        update pano_panorama
        set panorama_id = #{record.panoramaId,jdbcType=VARCHAR},
        exposition_id = #{record.expositionId,jdbcType=VARCHAR},
        panorama_sound_id = #{record.panoramaSoundId,jdbcType=VARCHAR},
        panorama_sort_key = #{record.panoramaSortKey,jdbcType=DECIMAL},
        start_scene_flag = #{record.startSceneFlag,jdbcType=VARCHAR},
        panorama_name = #{record.panoramaName,jdbcType=VARCHAR},
        panorama_path = #{record.panoramaPath,jdbcType=VARCHAR},
        panorama_hlookat = #{record.panoramaHlookat,jdbcType=VARCHAR},
        panorama_vlookat = #{record.panoramaVlookat,jdbcType=VARCHAR},
        thumbnail_show_flag = #{record.thumbnailShowFlag,jdbcType=VARCHAR},
        thumb_note = #{record.thumbNote,jdbcType=VARCHAR},
        DELETE_FLAG = #{record.deleteFlag,jdbcType=BIT},
        CREATE_USER_ID = #{record.createUserId,jdbcType=VARCHAR},
        CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP},
        LAST_UPDATE_USER_ID = #{record.lastUpdateUserId,jdbcType=VARCHAR},
        LAST_UPDATE_DATE = #{record.lastUpdateDate,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Base_Model_Where_Clause" />
        </if>
    </update>
    <!--检索场景热点可链接的场景 -->
    <select id="selectHotspotPanorama" parameterType="map" resultMap="BaseResultMap">
        SELECT
        *
        FROM
        pano_panorama pano
        WHERE
        pano.panorama_id <![CDATA[ <> ]]>
        #{panoramaId}
        AND pano.exposition_id = #{expositionId}
        ORDER BY panorama_sort_key
    </select>
    <!--检索地图可链接的场景 -->
    <select id="selectMapHotspotPanorama" parameterType="map" resultMap="BaseResultMap">
        SELECT
        *
        FROM
        pano_panorama pano
        WHERE
        panorama_id NOT IN (
        SELECT
        panorama_id
        FROM
        pano_exposition_map_hotspot map_hotspot
        WHERE
        pano.panorama_id =
        map_hotspot.panorama_id
        )
        AND pano.exposition_id = #{expositionId}
        ORDER BY panorama_sort_key
    </select>
</mapper>